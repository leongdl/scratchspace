FROM rockylinux:9

# Set locale
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV LC_NUMERIC=en_US.UTF-8

# Note: Docker container stack size must be set at runtime with --ulimit stack=<size>:<size>
# We'll set a more modest increase in the scripts themselves

# Add metadata
LABEL maintainer="SuperDave"
LABEL description="Houdini with RenderMan Docker container based on Rocky Linux 9"

# Create installation directories
RUN mkdir -p /install /install/houdini

# Install necessary tools and dependencies
RUN dnf install -y unzip tar gzip bzip2 which libX11 libXext libXrender libXrandr libXfixes libXcursor libXinerama libXi glibc-langpack-en gtk3 mesa-libGL

# Copy Houdini and RenderMan files into the container
COPY houdini-20.5.613-linux_x86_64_gcc11.2.tar.gz /install/
COPY RenderManForHoudini-26.1_2324948-linuxRHEL7_gcc93icx232.x86_64.rpm /install/

#######################################
# Houdini Installation Section
#######################################

# Install additional dependencies required for Houdini
RUN dnf install -y libSM libICE libXt libXcomposite libXdamage libXfixes libXext libXrender libXi \
    libXtst libXau libxcb libXdmcp libXinerama libXrandr libXcursor libXScrnSaver \
    alsa-lib mesa-libGL mesa-libGLU libglvnd-glx libglvnd-opengl bc tcsh python3.11 \
    nss nspr pciutils sudo

# Install Qt dependencies for Houdini rendering
RUN dnf install -y qt5-qtbase-gui qt5-qtx11extras xorg-x11-server-Xvfb mesa-dri-drivers mesa-libGL mesa-libGLU libXi libXrender libXfixes libXcursor libXinerama libXrandr libXcomposite libxshmfence libXdamage libXtst libXScrnSaver

# Install Python dependencies for Houdini
RUN dnf install -y python3-pip && \
    pip3 install future lxml requests

# Extract and install Houdini, then cleanup in single layer
RUN tar -xzf /install/houdini-20.5.613-linux_x86_64_gcc11.2.tar.gz -C /install/houdini && \
    cd /install/houdini/houdini-20.5.613-linux_x86_64_gcc11.2 && \
    ./houdini.install \
    --auto-install \
    --accept-EULA 2021-10-13 \
    --no-install-engine-maya \
    --no-install-engine-unity \
    --no-install-menus \
    --no-install-bin-symlink \
    --no-install-hfs-symlink \
    --no-install-license \
    --no-install-hqueue-server \
    --no-root-check \
    --make-dir /opt/houdini && \
    rm -rf /install/houdini-20.5.613-linux_x86_64_gcc11.2.tar.gz /install/houdini

# Set up Houdini environment
ENV HFS=/opt/houdini
ENV H=/opt/houdini
ENV HB=/opt/houdini/bin
ENV HDSO=/opt/houdini/dsolib
ENV HD=/opt/houdini/demo
ENV HH=/opt/houdini/houdini
ENV HHC=/opt/houdini/config
ENV HT=/opt/houdini/toolkit
ENV HSB=/opt/houdini/sbin
ENV TEMP=/tmp
ENV PATH=$HB:$HSB:$PATH
ENV LD_LIBRARY_PATH=/opt/houdini/dsolib
ENV HOUDINI_MAJOR_RELEASE=20
ENV HOUDINI_MINOR_RELEASE=5
ENV HOUDINI_BUILD_VERSION=613
ENV HOUDINI_VERSION=$HOUDINI_MAJOR_RELEASE.$HOUDINI_MINOR_RELEASE.$HOUDINI_BUILD_VERSION

#######################################
# RenderMan for Houdini Installation Section
#######################################

# Install RenderMan for Houdini from RPM and cleanup in single layer
RUN rpm -ivh /install/RenderManForHoudini-26.1_2324948-linuxRHEL7_gcc93icx232.x86_64.rpm && \
    rm -rf /install/RenderManForHoudini-26.1_2324948-linuxRHEL7_gcc93icx232.x86_64.rpm

# Set up RenderMan environment variables
ENV RMANTREE=/opt/pixar/RenderManProServer-26.1
ENV RFHTREE=/opt/pixar/RenderManForHoudini-26.1
ENV RMAN_PROCEDURALPATH=/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613/openvdb

# Update Houdini path to include RenderMan for Houdini
ENV HOUDINI_PATH=/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613:/opt/houdini

# Create Houdini package configuration for RenderMan
RUN mkdir -p /opt/houdini/packages && \
    echo '{\
    "env": [\
        {\
            "RMANTREE": "/opt/pixar/RenderManProServer-26.1"\
        },\
        {\
            "RFHTREE": "/opt/pixar/RenderManForHoudini-26.1"\
        },\
        {\
            "RMAN_PROCEDURALPATH": "/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613/openvdb"\
        },\
        {\
            "OCIO": "${RMANTREE}/lib/ocio/ACES-1.3/config.ocio"\
        }\
    ],\
    "path": "/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613"\
}' > /opt/houdini/packages/renderman.json

# Create a launcher script for Houdini with RenderMan
RUN echo '#!/bin/bash\n\
# Note: Stack size warning can be ignored or set at container runtime with --ulimit\n\
\n\
# Setup Houdini environment\n\
cd /opt/houdini && source ./houdini_setup_bash\n\
\n\
# Setup RenderMan environment\n\
export RMANTREE=/opt/pixar/RenderManProServer-26.1\n\
export RFHTREE=/opt/pixar/RenderManForHoudini-26.1\n\
export RMAN_PROCEDURALPATH=/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613/openvdb\n\
export HOUDINI_PATH=/opt/pixar/RenderManForHoudini-26.1/3.11/20.5.613:/opt/houdini\n\
\n\
# Set Qt platform to offscreen for headless rendering\n\
export QT_QPA_PLATFORM=offscreen\n\
\n\
# Launch Houdini with provided arguments\n\
/opt/houdini/bin/hrender "$@"' > /usr/local/bin/houdini && \
    chmod +x /usr/local/bin/houdini

# Create render directory for asset files
RUN mkdir -p /render

# Copy test scene file
COPY RMAN_test_02.hip /render/

# Cleanup remaining installation directory
RUN rm -rf /install

# Set default command to show available rendering tools
CMD echo "Available rendering commands:" && \
    echo "- houdini: Run Houdini renderer with RenderMan support" && \
    echo "RenderMan for Houdini 26.1 integrated" && \
    echo "Use verify-installations.sh to verify installations"